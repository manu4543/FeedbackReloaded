<?php


/**
 * Implements hook_permission().
 */
function feedback_reloaded_permission() {
  return array(
    'access feedback form' => array(
      'title' => t('Access feedback form'),
      'description' => t('Submit feedback messages.'),
    ),
    'view feedback messages' => array(
      'title' => t('View feedback messages'),
      'description' => t('View, process, and delete submitted feedback messages.'),
    ),
    'administer feedback' => array(
      'title' => t('Administer feedback settings'),
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function feedback_reloaded_entity_info() {
  $return = array();

  // Feedback Type entity.
  $return['feedback_reloaded_type'] = array(
    'label' => t('Feedback Type'),
    'plural label' => t('Feedback Types'),
    'entity class' => 'FeedbackRType',
    'controller class' => 'FeedbackRTypeController',
    'base table' => 'feedback_reloaded_type',
    'fieldable' => FALSE,
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
    ),
    'bundles' => array(),
    'bundle of' => 'feedback_reloaded',
    'access callback' => 'feedbackR_access',
    'module' => 'feedback_reloaded',
    // Enable the Entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/feedback-types',
      'file' => 'feedback_reloaded.admin.inc',
      'controller class' => 'feedbackRTypeUIController',
    ),
  );

  // Feedback entity.
  $return['feedback_reloaded'] = array(
    'label' => t('Feedback'),
    'plural label' => t('Feedbacks'),
    'entity class' => 'feedbackR',
    'controller class' => 'feedbackRController',
    'base table' => 'feedback_reloaded',
    'fieldable' => TRUE,
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' => FALSE,
      ),
    ),
    'entity keys' => array(
      'id' => 'fid',
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'name',
    ),
    'uri callback' => 'entity_class_uri',
    'label callback' => 'entity_class_label',
    'access callback' => 'feedbackR_access',
    'module' => 'feedback_reloaded',
    'metadata controller class' => 'feedbackRMetadataController',
  );

  

  return $return;
}

/**
* Implements hook_entity_info_alter().
*/
function feedback_reloaded_entity_info_alter(&$entity_info) {
  foreach (feedback_reloaded_types() as $type => $info) {
    $entity_info['feedback_reloaded']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/feedbacks/manage/%feedback_reloaded_type',
        'real path' => 'admin/structure/feedbacks/manage/' . $type,
        'bundle argument' => 4,
      ),
    );
  }
}

function feedback_reloaded_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('feedback_reloaded_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Determines whether the given user has access to a feedback or feedback type
 * operation.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update'). This isn't
 *   actually used as there is one global administer subs types permission.
 * @param $type
 *   The subscription type we want to check access for. This isn't
 *   actually used as there is one global administer subs types permission.
 * @param $account
 *   The user to check for. Leave it NULL to check for the current user.
 * @return bool
 *   Whether the user has access.
 */
function feedbackR_access($op, $type = NULL, $account = NULL) {
  return user_access('administer feedback', $account);
}
 
/**
 * Implements hook_init().
 */
function feedback_reloaded_init() {
  if (user_access('access feedback form')) {
    $path = drupal_get_path('module', 'feedback_reloaded');
    drupal_add_css($path . '/feedback_reloaded.css');
    drupal_add_js($path . '/feedback_reloaded.js');
	drupal_add_library('system', 'ui.draggable');
    $wizardPhaseOne = <<<EOT
	  <div id="feedback_form" class="feedback_form" onMouseMove="feedbackReloaded.getMouse(this,event);" onMouseUp="feedbackReloaded.getMouse(this,event);">
      <div style="border-bottom: solid 0px #ccc; float: left; width: 100%; padding-bottom: 0px;">
        <span><img src="$path/image/close.png" style="cursor: pointer; border: solid 0px #ccc; float:right;" onClick="feedbackReloaded.stopFeedback();"></span>
	    <img src="$path/image/feedback.png" width="" height="17"  \>&nbsp;&nbsp;<span style="font-size: 17px;">Feedback Wizard</span>
	  </div>
	  <br style="clear: both;">
      <div id="wizard_content">
      <p>Welcome to the Feedback Wizard. This Wizard lets you send us your problem, feature ideas and general suggestions or comments.</p>
      <p>Click Next, then you will be able to highilight,blackout and even add short notes in the webpage.</p>
      <p>This Module will use Java applet to take screenshot of your webpage therefore you are required to allow us if your browser ask for permission.</p>
      <div style="float:right; border-top: solid 1px #ccc; width: 100%; padding-top:9px;">
        <button id="button_next" style="float:right; height: 30px;" value="Next">Next</button>
      </div>
	  </div>
	  </div>  
EOT;
    $wizardPhaseTwo = <<<EOT
	  <p>
	  <button id="button_highlight" style="height: 30px; " disabled>Highlight</button>
	  Click and drag to highlight problem area.
	  </p>
      <p><button id="button_blackout" style="height: 30px;">Blackout</button>
	  Click and drag to hide personal information.     
	  </p>
      <p><button id="button_addnote" style="height: 30px;">Add Note</button>
      Click anywhere in page to add a note there.     
      </p>
	  <div style="float:right; border-top: solid 1px #ccc; width: 100%; padding-top:9px;">
        <button id="button_cancel" style="float:right; height: 30px;" value="Cancel" onClick="feedbackReloaded.stopFeedback();">Cancel</button>
        <span style="float:right;">&nbsp;&nbsp;&nbsp;</span>
        <button id="button_preview" style="float:right; height: 30px;" value="Next" onClick="feedbackReloaded.takeScreenshot();">Preview</button>
      </div>
	  
EOT;


$wizardPhaseThird = <<<EOT
		<img id="preview" class="preview_screenshot"\><br>
EOT;

$wizardPhaseThird .= drupal_render(drupal_get_form('feedback_form'));
  drupal_add_js(array('wizardPhaseOne' => $wizardPhaseOne), 'setting');
  drupal_add_js(array('wizardPhaseTwo' => $wizardPhaseTwo), 'setting');
  drupal_add_js(array('wizardPhaseThird' => $wizardPhaseThird), 'setting');
  drupal_add_js(array('moduleBasePath' => $path), 'setting');
  }
}

/**
 * Implements hook_page_build().
 
function feedback_reloaded_page_build(&$page) {
  if (user_access('access feedback form')) {
    $page['page_bottom']['feedback'] = array(
      '#title' => t('Feedback'),
      '#markup' => t('<div id="feedback_button" class="feedback_button">Feedback</div>'),
    );
  }
}
*/
/**
 * Form constructor for the feedback form.
 *
 * @see feedback_form_submit()
 * @ingroup forms
 */
function feedback_form($form, &$form_state) {  
  $form['message'] = array(
    '#type' => 'textarea',
    '#attributes' => array('class' => array('feedback-message')),
    '#cols' => 20,
    '#title' => t('Message'),
    '#required' => TRUE,
    '#wysiwyg' => FALSE,
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send feedback'),
    '#id' => 'feedback-submit',
  );

  return $form;
}


############################
### API Functions - CRUD ###
############################


/**
 * Returns an array of all subscription types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return SubsType[]
 *   Depending whether $type isset, an array of subscription types or a
 *   single one.
 */
function feedback_reloaded_get_types($type_name = NULL) {
  $feedback_reloaded_types = &drupal_static(__FUNCTION__);

  if (empty($feedback_reloaded_types)) {
    $feedback_reloaded_types = entity_load_multiple_by_name('feedback_reloaded_type', isset($type_name) ? array($type_name)
          : FALSE);
  }

  return isset($type_name) ? reset($feedback_reloaded_types) : $feedback_reloaded_types;
}