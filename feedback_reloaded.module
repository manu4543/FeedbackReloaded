<?php


/**
 * Implements hook_permission().
 */
function feedback_reloaded_permission() {
  return array(
    'access feedback form' => array(
      'title' => t('Access feedback form'),
      'description' => t('Submit feedback messages.'),
    ),
    'view feedback messages' => array(
      'title' => t('View feedback messages'),
      'description' => t('View, process, and delete submitted feedback messages.'),
    ),
    'administer feedback' => array(
      'title' => t('Administer feedback settings'),
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function feedback_reloaded_entity_info() {
  $return = array();

  // Feedback Type entity.
  $return['feedback_reloaded_type'] = array(
    'label' => t('Feedback Type'),
    'plural label' => t('Feedback Types'),
    'entity class' => 'FeedbackRType',
    'controller class' => 'FeedbackRTypeController',
    'base table' => 'feedback_reloaded_type',
    'fieldable' => FALSE,
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'name',
      'label' => 'label',
    ),
    'bundle of' => 'feedback_reloaded',
    'access callback' => 'feedback_reloaded_access',
    'module' => 'feedback_reloaded',
    // Enable the Entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/feedbacks',
      'file' => 'feedback_reloaded.admin.inc',
      'controller class' => 'FeedbackRTypeUIController',
    ),
  );

  // Feedback entity.
  $return['feedback_reloaded'] = array(
    'label' => t('Feedback'),
    'plural label' => t('Feedbacks'),
    'entity class' => 'FeedbackR',
    'controller class' => 'FeedbackRController',
    'base table' => 'feedback_reloaded',
    'fieldable' => TRUE,
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' => FALSE,
      ),
    ),
    'entity keys' => array(
      'id' => 'fid',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'name',
    ),
				'bundles' => array(),
    'uri callback' => 'entity_class_uri',
    'label callback' => 'entity_class_label',
    'access callback' => 'feedback_reloaded_access',
    'module' => 'feedback_reloaded',
    'metadata controller class' => 'FeedbackRMetadataController',
  );



  return $return;
}

/**
* Implements hook_entity_info_alter().
*/
function feedback_reloaded_entity_info_alter(&$entity_info) {
  foreach (feedback_reloaded_types() as $type => $info) {
    $entity_info['feedback_reloaded']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/feedbacks/manage/%feedback_reloaded_type',
        'real path' => 'admin/structure/feedbacks/manage/' . $type,
        'bundle argument' => 4,
      ),
    );
  }
}

function feedback_reloaded_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('feedback_reloaded_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Determines whether the given user has access to a feedback or feedback type
 * operation.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update'). This isn't
 *   actually used as there is one global administer subs types permission.
 * @param $type
 *   The subscription type we want to check access for. This isn't
 *   actually used as there is one global administer subs types permission.
 * @param $account
 *   The user to check for. Leave it NULL to check for the current user.
 * @return bool
 *   Whether the user has access.
 */
function feedback_reloaded_access($op, $type = NULL, $account = NULL) {
  return user_access('administer feedback', $account);
}



/**
 * Implements hook_init().
 */
function feedback_reloaded_init() {
  if (user_access('access feedback form')) {
    $path = drupal_get_path('module', 'feedback_reloaded');
    drupal_add_css($path . '/feedback_reloaded.css');
    drupal_add_js($path . '/feedback_reloaded.js');
   	drupal_add_library('system', 'ui.draggable');

 
				$wizardContainer = <<<EOT
					<div id="feedback_form_container" class="feedback_form" onMouseMove="feedbackReloaded.getMouse(this,event);" onMouseUp="feedbackReloaded.getMouse(this,event);">
      <div style="border-bottom: solid 0px #ccc; float: left; width: 100%; padding-bottom: 0px;">
        <span><img src="$path/image/close.png" style="cursor: pointer; border: solid 0px #ccc; float:right;" onClick="feedbackReloaded.stopFeedback();"></span>
	       <img src="$path/image/fb.gif" height="30" \>&nbsp;&nbsp;<span style="font-size: 18px;">Feedback Wizard</span>
	     </div>
					<div id="wizard_form_feedbacktype" style="display:none;"></div>
					<div id="wizard_form_feedback" style="display:none;"></div>
					<div id="wizard_content"></div>
					</div>
EOT;

    $wizardPhaseOneContent = drupal_render(drupal_get_form('feedback_type_form'));
	   $wizardPhaseTwoContent = <<<EOT
	  <p style="margin-top:50px;">
	  <button id="button_highlight" style="height: 30px; " disabled>Highlight</button>
	  Click and drag to highlight problem area.
	  </p>
      <p><button id="button_blackout" style="height: 30px;">Blackout</button>
	  Click and drag to hide personal information.
	  </p>
      <p><button id="button_addnote" style="height: 30px;">Add Note</button>
      Click anywhere in page to add a note there.
      </p>
	  <div style="float:right; border-top: solid 1px #ccc; width: 100%; padding-top:9px;">
        <button id="button_cancel" style="float:right; height: 30px;" value="Cancel" onClick="feedbackReloaded.stopFeedback();">Cancel</button>
        <span style="float:right;">&nbsp;&nbsp;&nbsp;</span>
        <button id="button_preview" style="float:right; height: 30px;" value="Next" onClick="feedbackReloaded.takeScreenshot();">Preview</button>
   </div>			
EOT;
	
				drupal_add_js(array('wizardContainer' => $wizardContainer), 'setting');
				drupal_add_js(array('wizardPhaseOneContent' => $wizardPhaseOneContent), 'setting');
    drupal_add_js(array('wizardPhaseTwoContent' => $wizardPhaseTwoContent), 'setting');
	   drupal_add_js(array('moduleBasePath' => $path), 'setting');
  }
}

/**
 * Simple form whose ajax-enabled 'changethis' member causes a text change
 * in the description of the 'replace_textfield' member.
 * See @link http://drupal.org/node/262422 Form API Tutorial @endlink
 */
function feedback_type_form($form, &$form_state) {
  $form = array();
		$feedbackTypes = array();
  
		foreach (feedback_reloaded_get_types() as $type => $info) {
		$key = $info->getTranslation('name');
		$value = $info->getTranslation('label');
  $feedbackTypes[$key] = $value;
		}
		
		$form['div_tag'] = array(
    '#markup' => '<p style="margin-bottom:9px; margin-top:50px;">Welcome to Feedback Wizard. This wizard will let you send bug reports, new feature ideas, suggestions and other comments.<br><br>Choose one of the following feedback type.</p>',
  );
		
  $form['feedbacktype'] = array(
    '#type' => 'select',
    '#options' => $feedbackTypes,
				'#attributes' => array(
				  'style' => 'width: 150px; text-align: center;height: 28px !important;',
				),
			
  );
		
		$form['div_tag2'] = array(
    '#markup' => '<p style="margin-bottom:9px;">Click next then you will be able to highlight the problem area.</p>',
  );
		
		$form['button'] = array(
    '#type' => 'button',
    '#value' => t('Next'),
				'#attributes' => array(
				  'onclick' => 'feedbackReloaded.startPhaseTwo()',
				),
				'#ajax' => array(
      'callback' => 'feedback_type_form_callback',
						'event' => 'click',
						// set progress to something else then bar and throbber, although not a standard but removes any progress indicator.
						'progress' => 'NULL',
     ),
  );
		
		
		
		return $form;
}

/**
 * Callback for ajax_example_simplest.
 *
 * On an ajax submit, the form builder function is called again, then the $form
 * and $form_state are passed to this callback function so it can select which
 * portion of the form to send on to the client.
 *
 * @return renderable array (the textfield element)
 */
function feedback_type_form_callback($form, $form_state) {		
  
		//Create feedback form for selected feedback form type and save in Drupal.settings
		$feedbackType = feedback_reloaded_get_types($form_state['values']['feedbacktype']);
		$feedback = entity_create('feedback_reloaded', array('type' => $feedbackType));
		$feedback_form = drupal_get_form('feedback_reloaded_form', $feedback);
		drupal_add_js(array('feeedbackForm' => drupal_render($feedback_form)) , 'setting');
		
		//Now return the $form as it is.
  return $form;
} 

function feedback_reloaded_form($form, &$form_state, $feedback) {
  $form_state['feedback'] = $feedback;
  $feedback_type = subs_get_types($feedback->type);
  $aid = entity_id('feedback_reloaded', $feedback);
		$administer_feedback_reloaded = user_access('administer feedback');
		
		field_attach_form('feedback_reloaded', $feedback, $form, $form_state);  

  $form['div_tag'] = array(
    '#markup' => '<p style="margin-top:50px; margin-bottom:9px;">Please give us the brief desciption reagarding your feedback.</p>',
  );
		
  $form['message'] = array(
		  '#type' => 'textarea',
 			'#required' => TRUE,
				'#attributes' => array(
				  'style' => 'width: 500px;',
				),
		);
  
		$form['preview'] = array(
    '#markup' => '<p><strong>Screenshot Preview</strong><br><img id="preview" class="preview_div" src=""></img></p>'
  );
		
  $form['actions'] = array(
    '#weight' => 100,
  );
  
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit Feedback'),
    '#submit' => array('feedback_reloaded_form_submit'),
  );
	 return $form;
}

/**
 * Submit callback.
 * Saves a Feedback.
 *
 * @see feedback_reloaded_form()
 */
function feedback_reloaded_form_submit(&$form, &$form_state) {
  $feedback = $form_state['subscription'];
  
  // Build entity.
  entity_form_submit_build_entity('feedback_reloaded', $feedback, $form, $form_state);

  // Save entity.
  feedback_reloaded_save($feedback);

  // Redirect.
  $feedback_uri = entity_uri('feedback_reloaded', $feedback);
  $form_state['redirect'] = $feedback_uri['path'];

  // Success message.
  drupal_set_message(t('Feedback %title saved.', array('%title' => entity_label('feedback_reloaded', $feedback))));
}

############################
### API Functions - CRUD ###
############################

/**
 * Fetch a subscription object.
 *
 * @param $fid
 *   Integer specifying the subscription id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $feedback_reloaded object or FALSE if it cannot be loaded.
 *
 * @see feedback_reloaded_load_multiple()
 */
function feedback_reloaded_load($fid, $reset = FALSE) {
  $feedback_reloadeds = feedback_reloaded_load_multiple(array($fid), array(), $reset);
  return reset($feedback_reloadeds);
}

/**
 * Load multiple subscriptions based on certain conditions.
 *
 * @param $sids
 *   An array of subscription IDs.
 * @param $conditions
 *   An array of conditions to match against the {subs} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return array|FALSE
 *   An array of subscription objects, indexed by ID or FALSE of none were found.
 *
 * @see entity_load()
 * @see feedback_reloaded_load()
 * @see feedback_reloaded_load_by_user()
 */
function feedback_reloaded_load_multiple($fids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('feedback_reloaded', $fids, $conditions, $reset);
}

/**
 * Fetch subscriptions by account.
 *
 * @param $account
 *   The user account to load subscriptions for, or its uid.
 * @param $type_name
 *   To load subscriptions of a single type, specify it.
 * @param $reset
 *   To bypass the static cache set this to true.
 * @return Subs|array|FALSE
 *   Either a single subscription or an array of subscriptions keyed by
 *   subscription type or FALSE of no subscriptions found.
 *
 * @see feedback_reloaded_load_multiple()
 */
function feedback_reloaded_load_by_user($account, $type_name = NULL, $reset = FALSE) {
  // Use a separate query to determine all subscription ids per user and cache them.
  // That way we can look up subscriptions by id and benefit from the static cache
  // of the entity loader.
  $cache = &drupal_static(__FUNCTION__, array());
  $uid = is_object($account) ? $account->uid : $account;

  if (!isset($cache[$uid]) || $reset) {
    if (empty($type_name)) {
      $feedback_reloadeds = feedback_reloaded_load_multiple(FALSE, array('uid' => $uid));
      // Cache ids for further lookups.
      $cache[$uid] = array();
      foreach ($feedback_reloadeds as $fid => $feedback_reloaded) {
        $cache[$uid][] = $fid;
      }
      return $feedback_reloadeds;
    }
    $cache[$uid] = db_select('feedback_reloaded', 'fr')
      ->fields('fr', array('fid'))
      ->condition('uid', $uid)
      ->execute()
      ->fetchCol();
  }

  if (!empty($type_name)) {
    // Manually filter, as array_filter() can't take additional parameters.
    $feedback_reloaded_filtered = array();

    foreach ($cache[$uid] as $fid) {
      if ($feedback_reloaded = feedback_reloaded_load($fid)) {
        if ($feedback_reloaded->type === $type_name) {
          $feedback_reloaded_filtered[$fid] = $feedback_reloaded;
        }
      }
    }

    return $feedback_reloaded_filtered;
  }

  // Return an array containing subscriptions keyed by subscription id.
  return feedback_reloaded_load_multiple($cache[$uid]);
}

/**
 * Deletes a subscription.
 * Set it to cancelled before to trigger any relevant events.
 *
 * @param Subs
 *   The subscription object.
*/
function feedback_reloaded_delete(FeedbackR $feedback_reloaded) {
  //feedback_reloaded_set_cancelled($feedback_reloaded);
  $feedback_reloaded->delete();
}
 
/**
 * Delete multiple subscriptions.
 *
 * @param array
 *   An array of subscription IDs.
 */
function feedback_reloaded_delete_multiple(array $fids) {
  // Bypass the traditional entity_get_controller() approach because we
  // need to cancel each subscription before its deleted.
  foreach ($fids as $fid) {
    if ($feedback_reloaded = feedback_reloaded_load($fid)) {
      feedback_reloaded_delete($feedback_reloaded);
    }
  }
}

/**
 * Create a new subscription object.
 *
 * @param $values
 *   An array of values to initialize the subscription with.
 * @return Subs
 *   The newly-created subscription object.
 */
function feedback_reloaded_create(array $values) {
  return new FeedbackR($values);
}

/**
 * Saves a subscription.
 *
 * @param $feedback_reloaded
 *   The subscription object.
 * @return boolean
 *   Whether the subscription was saved successfully.
 */
function feedback_reloaded_save(FeedbackR $feedback_reloaded) {
  return $feedback_reloaded->save();
}

/**
* Load task Type.
*/
function feedback_reloaded_type_load($type) {
  return feedback_reloaded_types($type);
}
/**
* List of task Types.
*/
function feedback_reloaded_type_types($type = NULL) {
  $types = entity_load_multiple_by_name('feedback_reloaded_type', isset($type) ? array($type) : FALSE);
  return isset($type) ? reset($types) : $types;
}

/**
* Save task type entity.
*/
function feedback_reloaded_type_save($type) {
  entity_save('feedback_reloaded_type', $type);
}

/**
* Delete single case type.
*/
function feedback_reloaded_type_delete($type) {
  entity_delete('feedback_reloaded_type', entity_id('feedback_reloaded_type' ,$type));
}

/**
* Delete multiple case types.
*/
function feedback_reloaded_type_delete_multiple($type_ids) {
  entity_delete_multiple('feedback_reloaded_type', $type_ids);
}

/**
 * Returns an array of all subscription types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return SubsType[]
 *   Depending whether $type isset, an array of subscription types or a
 *   single one.
 */
function feedback_reloaded_get_types($type_name = NULL) {
  $feedback_reloaded_types = &drupal_static(__FUNCTION__);

  if (empty($feedback_reloaded_types)) {
    $feedback_reloaded_types = entity_load_multiple_by_name('feedback_reloaded_type', isset($type_name) ? array($type_name)
          : FALSE);
  }

  return isset($type_name) ? reset($feedback_reloaded_types) : $feedback_reloaded_types;
}