<?php
/**
 * @file
 * Installation functions for Feedback module.
 */

/**
 * Implements hook_uninstall().
 */
function feedback_reloaded_uninstall() {
  $result = db_select('variable', 'v')
    ->fields('v', array('name'))
    ->condition('name', 'feedback_reloaded%', '=')
    ->execute();

  foreach ($result as $row) {
    variable_del($row->name);
  }
  variable_del('feedback_reloaded_screenshot_uri');
}

/**
 * Implements hook_schema().
 */
function feedback_reloaded_schema() {
  $schema = array();

  $schema['feedback_reloaded'] = array(
    'description' => 'Stores all feedback messages.',
    'fields' => array(
      'fid' => array(
        'description' => 'Feedback message ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The {feedback_reloaded_type}.name of this subscription.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'User ID of the feedback message author.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'Feedback status (0 = new, 1 = processed).',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'title' => array(
        'description' => 'The feedback title.',
        'type' => 'text',
        'size' => 'big',
      ),
      'message' => array(
        'description' => 'The feedback message.',
        'type' => 'text',
        'size' => 'big',
      ),
      'url' => array(
        'description' => 'Absolute URL of the originating page.',
        'type' => 'text',
        'not null' => TRUE,
      ),
      'screenshoturl' => array(
        'description' => 'Absolute URL of the screenshot using file_create_url.',
        'type' => 'text',
        'not null' => TRUE,
      ),
      'useragent' => array(
        'description' => 'User agent of the feedback message author.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'timestamp' => array(
        'description' => 'UNIX timestamp of the feedback message creation date.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('fid'),
  );

  $schema['feedback_reloaded_type'] = array(
    'description' => 'Stores information about defined feedback types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique feedback type identifier.',
      ),
      'name' => array(
        'description' => 'The machine-readable name of this feedback type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this feedback type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this feedback type in relation to others.',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data related to this feedback type.',
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'description' => array(
        'description' => 'A brief description of this subscription type.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
        'translatable' => TRUE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('name'),
    ),
  );
  return $schema;
}

/**
 * Implements hook_requirements().
 */
function feedback_reloaded_requirements($phase) {
  $requirements = array();
  $feedback_reloaded_screenshot_uri = variable_get('feedback_reloaded_screenshot_uri');
  $privateFilePath = variable_get('file_private_path');
  if ($phase == 'runtime') {
    $requirements['filestorage'] = array(
      'title' => t('Feedback screenshot storage'),
      'value' => $feedback_reloaded_screenshot_uri,
      'severity' => REQUIREMENT_OK,
      'description' => t('All requirements are met successfully.'),
    );

    // Create sub-directory 'feedback_reloaded_screenshots', where screenshots will be saved
    // Executes only first time when variable feedback_reloaded_screenshot_uri is not set.

    // If Private file path is set
    if($privateFilePath && empty($feedback_reloaded_screenshot_uri)) {
      $path = variable_get('file_private_path').'://feedback_reloaded_screenshots';
      variable_set('feedback_reloaded_screenshot_uri', $path);
      $feedback_reloaded_screenshot_uri = variable_get('feedback_reloaded_screenshot_uri');
      if(!file_prepare_directory($path, FILE_CREATE_DIRECTORY)) {
        $requirements['filestorage']['description'] = t('The feedback_reloaded_screenshots directory, could not be created due to a misconfigured files or directory. Please ensure that the files or directory is correctly configured and that the webserver has permission to create directories.');
        $requirements['filestorage']['severity'] = REQUIREMENT_ERROR;
        $requirements['filestorage']['value'] = t('Unable to create');
      }
    }

    // If Private file path is not set
    if(empty($privateFilePath) && empty($feedback_reloaded_screenshot_uri)) {
      $path = 'public://feedback_reloaded_screenshots';
      variable_set('feedback_reloaded_screenshot_uri', $path);
      $feedback_reloaded_screenshot_uri = variable_get('feedback_reloaded_screenshot_uri');
      if(!file_prepare_directory($path, FILE_CREATE_DIRECTORY)) {
        $requirements['filestorage']['description'] = t('Thee feedback_reloaded_screenshots directory, could not be created due to a misconfigured files directory. Please ensure that the files directory is correctly configured and that the webserver has permission to create directories.');
        $requirements['filestorage']['severity'] = REQUIREMENT_ERROR;
        $requirements['filestorage']['value'] = t('Unable to create');
      }
    }

    // If private storage is removed at some point later then degrade gracefully to public storage
    if($feedback_reloaded_screenshot_uri == 'public://feedback_reloaded_screenshots' || (empty($privateFilePath) && $feedback_reloaded_screenshot_uri == 'private://feedback_reloaded_screenshots')) {
      $path = 'public://feedback_reloaded_screenshots';
      variable_set('feedback_reloaded_screenshot_uri', $path);
      $requirements['filestorage']['description'] = t('Screenshots may contain sensitive information and it is recommended to save them in private stroage.');
      $requirements['filestorage']['severity'] = REQUIREMENT_WARNING;
      if(!$privateFilePath)
        $requirements['filestorage']['value'] = t('Private storage not available');
      else
        $requirements['filestorage']['value'] = t('Screenshot Destination is not private.');
    }
  }
  return $requirements;
}
